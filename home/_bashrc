# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

OLDPATH=$PATH

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# don't put duplicate lines in the history. See bash(1) for more options
export HISTCONTROL=ignoredups
# ... and ignore same sucessive entries.
export HISTCONTROL=ignoreboth

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(lesspipe)"

function timer_start {
  timer=${timer:-$SECONDS}
}

function timer_stop {
  timer_show=$(($SECONDS - $timer))
  unset timer
}

trap 'timer_start' DEBUG

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
xterm-color|xterm-256color|xterm-termite|xterm-kitty|screen)
    PS1='[${timer_show}]\[\033[01;32m\]\u\[\033[00m\]@\[\033[01;36m\]\h\[\033[00m\]@\A:\[\033[01;34m\]\w\[\033[00m\]\$ '
    ;;
*)
    PS1='[${timer_show}]\u@\h@\A:\w\$ '
    ;;
esac

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*|screen)
    PROMPT_COMMAND='echo -ne "\033]0;${USER}@${HOSTNAME}: ${PWD/$HOME/~}\007"'
    ;;
*)
    ;;
esac

if [ "$PROMPT_COMMAND" == "" ]; then
  PROMPT_COMMAND="timer_stop"
else
  PROMPT_COMMAND="$PROMPT_COMMAND; timer_stop"
fi

# check OS type
case "$(uname -s)" in
    Linux*)     OS_TYPE=Linux;;
    Darwin*)    OS_TYPE=Mac;;
    CYGWIN*)    OS_TYPE=Cygwin;;
    MINGW*)     OS_TYPE=MinGw;;
    *)          OS_TYPE="UNKNOWN:${unameOut}"
esac

# enable color support of ls and also add handy aliases
if [ "$TERM" != "dumb" ]; then
  if [ "$OS_TYPE" == "Linux" ]; then
    alias ls='ls --color'
    alias ll='exa -l'
  elif [ "$OS_TYPE" == "Mac" ]; then
    alias ls='ls -G'
    alias ll='ls -l -h'
  fi
fi

# sources
SOURCES=("/etc/bash_completion"    # bash completion
         "$HOME/.travis/travis.sh" # travis
         "/etc/profile.d/vte.sh"   # termite
         "$HOME/workspace/ali/scripts/alibashrc"       # ali machine alias
         "$HOME/workspace/toolbox/home/private_bashrc" # private alias
        )
for f in "${SOURCES[@]}"
do
  [ -r "$f" ] && source $f
done

# personal preference
export LANG="zh_CN.UTF-8"
export EDITOR="emacs"

# set PATH so it includes user's private bin if it exists
if [ -d ~/bin ] ; then
  PATH=~/bin:"${PATH}"
fi
if [ -d ~/.local/bin ] ; then
  PATH=~/.local/bin:"${PATH}"
fi

# for ruby gem
command -v ruby >/dev/null 2>&1 && PATH="$PATH:$(ruby -e 'print Gem.user_dir')/bin"

# for java
export MAVEN_OPTS="-Xmx2G"

if [ "$OS_TYPE" == "Linux" ]; then
  export JAVA_HOME=/usr/lib/jvm/default
  # for rJava
  export LD_LIBRARY_PATH=$JAVA_HOME/jre/lib/amd64:$JAVA_HOME/jre/lib/amd64/server
elif [ "$OS_TYPE" == "Mac" ]; then
  export PATH="$HOME/.jenv/bin:$PATH"
  eval "$(jenv init -)"
  # for rJava
  export LD_LIBRARY_PATH=$JAVA_HOME/jre/lib/server
fi

# better gui for java apps
# export _JAVA_OPTIONS='-Dawt.useSystemAAFontSettings=on -Dswing.aatext=true -Dswing.defaultlaf=com.sun.java.swing.plaf.gtk.GTKLookAndFeel'
# for visualvm remote profiling
jmx() {
    if [[ -n "$1" && -n "$2" ]]; then
        _JAVA_OPTIONS="$_JAVA_OPTIONS -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.port=$1" "${@:2}"
    else
        echo "usage: jmx port command"
    fi
}

# auto-completion
bind "\C-n":menu-complete

# Less Colors for Man Pages
export LESS_TERMCAP_mb=$'\E[5;34m'       # begin blinking
export LESS_TERMCAP_md=$'\E[1;34m'       # begin bold
export LESS_TERMCAP_me=$'\E[0m'          # end mode
export LESS_TERMCAP_se=$'\E[0m'          # end standout-mode
export LESS_TERMCAP_so=$'\E[1;37;44m'    # begin standout-mode - info box
export LESS_TERMCAP_ue=$'\E[0m'          # end underline
export LESS_TERMCAP_us=$'\E[4m'          # begin underline

# for perldoc
export PERLDOC_PAGER=less

# for go lang
export GOPATH=~/.go
PATH=$PATH:~/.go/bin

# for nodejs
export npm_config_prefix=$HOME/.node_modules
PATH=$PATH:$npm_config_prefix/bin
alias cnpm="npm --registry=https://registry.npm.taobao.org \
--cache=$HOME/.npm/.cache/cnpm \
--disturl=https://npm.taobao.org/dist \
--userconfig=$HOME/.cnpmrc"

# hadoop
# export HADOOP_HOME=$HOME/opt/hadoop
# PATH=$PATH:$HADOOP_HOME/bin:$HADOOP_HOME/sbin
# hive
# export HIVE_HOME=$HOME/opt/apache-hive-2.1.0-bin
# export HIVE_LIB=$HIVE_HOME/lib
# PATH=$PATH:$HIVE_HOME/bin
# volume2
# export HADOOP_CLASSPATH=$HADOOP_CLASSPATH:$HADOOP_HOME/share/hadoop/odps/lib/*

# OS specific
if [ "$OS_TYPE" == "Linux" ]; then
  # alias
  alias e='emacsclient -n'
  # top 20 frequent command
  alias fav='history | awk "{CMD[\$2]++;count++;} END { for(a in CMD) print CMD[a] \" \" CMD[a]/count*100 \"% \" a;}" | grep -v "./" | column -c3 -s " " -t | sort -nr | nl |  head -n20'
  # open current folder in nautilus
  alias n='nautilus -n . & 2>/dev/null 1>/dev/null'
  # current desktop vnc for vbox guest os
  alias vnc="x0vncserver -display :0 -passwordfile ~/.vnc/passwd"
  alias gitmeld="git difftool --dir-diff"
  alias dmesg="dmesg -H"
  alias b85="synergyc -f -n cruiser --enable-drag-drop --debug INFO $B85"

  # steam
  export STEAM_RUNTIME=0

elif [ "$OS_TYPE" == "Mac" ]; then
  SYNC="/Applications/Synergy.app/Contents/MacOS/synergyc -f -n escort --debug INFO"
  alias b85="$SYNC --enable-drag-drop $B85"
  alias ali="$SYNC --enable-drag-drop $ALI"
fi

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/home/lyman/miniconda3/bin/conda' 'shell.bash' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/home/lyman/miniconda3/etc/profile.d/conda.sh" ]; then
        . "/home/lyman/miniconda3/etc/profile.d/conda.sh"
    else
        export PATH="/home/lyman/miniconda3/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<

# avoid PATH recursively expand
if [ -z "$PATHSET" ]; then
  export PATH
  export PATHSET=done
else
  export PATH=$OLDPATH
fi
